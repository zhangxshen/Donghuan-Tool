import process
import ui
from PyQt5.QtWidgets import QApplication, QMainWindow, QFileDialog
from PyQt5 import QtCore, QtGui
from PyQt5.QtCore import Qt, QThread, pyqtSignal
from pathlib import Path
import sys
import datetime


"""---------------------------------
图形界面逻辑控制类
---------------------------------"""
class title_corr_t(QThread):
    _signal = pyqtSignal()
    def __init__(self,path_target,path_dict):
        super(title_corr_t, self).__init__()
        self.path_target = path_target
        self.path_dict = path_dict

    def run(self):
        process.process(self.path_target,self.path_dict)
        self._signal.emit()


class sigstand_corr_t(QThread):
    _signal = pyqtSignal()
    def __init__(self,path_target,path_dict):
        super(sigstand_corr_t, self).__init__()
        self.path_target = path_target
        self.path_dict = path_dict

    def run(self):
        process.sigstand_corr(self.path_target,self.path_dict)
        self._signal.emit()


class comple_corr_t(QThread):
    _signal = pyqtSignal()
    def __init__(self,path_target,path_dict):
        super(comple_corr_t, self).__init__()
        self.path_target = path_target
        self.path_dict = path_dict

    def run(self):
        process.comple_corr(self.path_target,self.path_dict)
        self._signal.emit()

class EmittingStr(QtCore.QObject):
    textWritten = QtCore.pyqtSignal(str)  #定义一个发送str的信号
    def write(self, text):
        self.textWritten.emit(str(text))

class tool_ctrl(QMainWindow,ui.Ui_MainWindow):
    finish_flag = 0

    def __init__(self):
        super().__init__()
        self.setupUi(self)
        path_target = ''
        path_dict = ''
        sys.stdout = EmittingStr(textWritten=self.outputWritten)
        sys.stderr = EmittingStr(textWritten=self.outputWritten)

#重写拖拽方法，实现无边框拖动

    def mousePressEvent(self, event):
        if event.button() == QtCore.Qt.LeftButton:
            self.m_flag = True
            self.m_Position = event.globalPos() - self.pos()  # 获取鼠标相对窗口的位置
            event.accept()
            self.setCursor(QtGui.QCursor(QtCore.Qt.OpenHandCursor))  # 更改鼠标图标

    def mouseMoveEvent(self, QMouseEvent):
        if QtCore.Qt.LeftButton and self.m_flag:
            self.move(QMouseEvent.globalPos() - self.m_Position)  # 更改窗口位置
            QMouseEvent.accept()

    def mouseReleaseEvent(self, QMouseEvent):
        self.m_flag = False
        self.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))

    def outputWritten(self, text):
        cursor = self.textBrowser.textCursor()
        cursor.movePosition(QtGui.QTextCursor.End)
        cursor.insertText(text)
        self.textBrowser.setTextCursor(cursor)
        self.textBrowser.ensureCursorVisible()

    def file_import(self):
        home_dir = str(Path.home())
        fname = QFileDialog.getOpenFileName(self, 'Open file', home_dir)
        self.update_path_target(fname[0])
        self.pushButton.setEnabled(False)

    def dict_import(self):
        home_dir = str(Path.home())
        fname = QFileDialog.getOpenFileName(self, 'Open file', home_dir)
        self.update_path_dict(fname[0])
        self.pushButton_2.setEnabled(False)

    def update_path_target(self,s):
        self.path_target = str(s)
        print('数据文件路径：',self.path_target)

    def update_path_dict(self,s):
        self.path_dict = str(s)
        print('标准表文件路径：',self.path_dict)

    def process_thread1(self):
        self.process_thread1 = title_corr_t(self.path_target,self.path_dict)
        self.process_thread1._signal.connect(self.finish)
        self.process_thread1.start()

    def process_thread2(self):
        self.process_thread2 = sigstand_corr_t(self.path_target, self.path_dict)
        self.process_thread2._signal.connect(self.finish)
        self.process_thread2.start()

    def process_thread3(self):
        self.process_thread3 = comple_corr_t(self.path_target, self.path_dict)
        self.process_thread3._signal.connect(self.finish)
        self.process_thread3.start()

    def finish(self):
        self.finish_flag = self.finish_flag+1
        if self.finish_flag >= 3:
            self.endtime = datetime.datetime.now()
            print("程序总耗时：[", self.starttime, self.endtime, "]:", (self.endtime - self.starttime))
            print('###################所有勘误已完成###################')

    def threads_run(self):
        self.starttime = datetime.datetime.now()
        self.process_thread1()
        self.process_thread2()
        self.process_thread3()
        self.pushButton_3.setEnabled(False)
